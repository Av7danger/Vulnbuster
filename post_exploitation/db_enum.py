import asyncio
from typing import List, Dict, Any
import aiomysql
import sqlite3
import re

# --- Real DB Dump (MySQL/MariaDB/SQLite) ---
async def dump_db(target: str, dbtype: str = 'mysql', user: str = 'root', password: str = '', dbname: str = 'test', host: str = 'localhost', port: int = 3306) -> Dict[str, Any]:
    users, hashes = [], []
    try:
        if dbtype == 'mysql':
            conn = await aiomysql.connect(host=host, port=port, user=user, password=password, db=dbname)
            async with conn.cursor() as cur:
                await cur.execute("SHOW TABLES;")
                tables = [row[0] for row in await cur.fetchall()]
                for t in tables:
                    await cur.execute(f"SELECT * FROM {t} LIMIT 100;")
                    for row in await cur.fetchall():
                        for val in row:
                            if isinstance(val, str):
                                if re.match(r'^[a-f0-9]{32}$', val):
                                    hashes.append(val)
                                if 'admin' in val or 'user' in val:
                                    users.append(val)
            conn.close()
        elif dbtype == 'sqlite':
            conn = sqlite3.connect(target)
            cur = conn.cursor()
            cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cur.fetchall()]
            for t in tables:
                cur.execute(f"SELECT * FROM {t} LIMIT 100;")
                for row in cur.fetchall():
                    for val in row:
                        if isinstance(val, str):
                            if re.match(r'^[a-f0-9]{32}$', val):
                                hashes.append(val)
                            if 'admin' in val or 'user' in val:
                                users.append(val)
            conn.close()
        # Add more DB types as needed
    except Exception as e:
        return {'error': str(e), 'users': users, 'hashes': hashes}
    return {'users': list(set(users)), 'hashes': list(set(hashes))}

# --- AI Hash Analysis Prompt ---
AI_HASH_PROMPT = (
    "You are a password cracking expert. Given a hash, identify its type and suggest the best cracking method and wordlist. "
    "If possible, output a sample hashcat/john command.\n"
    "Example: For MD5, suggest hashcat -m 0 -a 0 hash.txt rockyou.txt."
)

async def ai_analyze_hash(hash_str: str) -> str:
    # TODO: Integrate with Mixtral or LLM for hash analysis
    # Use AI_HASH_PROMPT as the system/user prompt
    await asyncio.sleep(0.1)
    return f"[AI] Hash analysis for {hash_str} (prompt: {AI_HASH_PROMPT[:60]}...)" 