import asyncio
import aiohttp
import re
import os
from typing import List, Dict, Any

# --- Real Exploit-DB Search (scrape web interface) ---
EXPLOITDB_SEARCH_URL = 'https://www.exploit-db.com/search?order_by=date_published&order=desc&text={}'
EXPLOITDB_BASE = 'https://www.exploit-db.com'

async def search_exploits(query: str) -> List[Dict[str, Any]]:
    exploits = []
    try:
        async with aiohttp.ClientSession() as session:
            url = EXPLOITDB_SEARCH_URL.format(query.replace(' ', '+'))
            async with session.get(url, timeout=10) as resp:
                html = await resp.text()
                # Simple regex to find exploit links and titles
                for m in re.finditer(r'<a href="(/exploits/\d+)".*?>([^<]+)</a>', html):
                    link, title = m.groups()
                    exploits.append({'name': title.strip(), 'url': EXPLOITDB_BASE + link})
    except Exception as e:
        exploits.append({'error': str(e)})
    return exploits

# --- Clone Exploit Script (wget or git) ---
async def clone_exploit(url: str) -> str:
    # Try to download the raw exploit file if possible
    try:
        filename = url.split('/')[-1]
        out_path = f'/tmp/{filename}'
        # Use wget for simplicity
        proc = await asyncio.create_subprocess_exec('wget', '-O', out_path, url,
                                                    stdout=asyncio.subprocess.PIPE,
                                                    stderr=asyncio.subprocess.PIPE)
        await proc.communicate()
        if os.path.exists(out_path):
            return out_path
        return '[error] Download failed'
    except Exception as e:
        return f'[error] {e}'

# --- AI Script Selection Prompt ---
AI_SELECT_PROMPT = (
    "You are an expert pentester. Given a list of exploit scripts, select the best one for the target. "
    "Consider language, reliability, and exploitability. Output only the best script's name and reason.\n"
    "Example: Prefer Python over Perl, or scripts with PoC and RCE."
)

async def ai_select_best(exploits: List[Dict[str, Any]]) -> Dict[str, Any]:
    # TODO: Integrate with Mixtral or LLM for best script selection
    # Use AI_SELECT_PROMPT as the system/user prompt
    await asyncio.sleep(0.1)
    return exploits[0] if exploits else {} 