""
Test configuration and fixtures for VulnBuster tests.
"""

import asyncio
import json
import os
import tempfile
from datetime import datetime, timezone
from pathlib import Path
from typing import Any, AsyncGenerator, Dict, List, Optional

import pytest
import pytest_asyncio

from vulnbuster.interfaces.enhanced_reporter import (
    ReportFinding, ReportMetadata, ReportSeverity, ReportConfidence
)

# Configure logging
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Set up test data directory
TEST_DATA_DIR = Path(__file__).parent / "data"
os.makedirs(TEST_DATA_DIR, exist_ok=True)

@pytest.fixture(scope="session")
def event_loop():
    ""
    Create an instance of the default event loop for the test session.
    """
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture
def temp_output_dir():
    ""
    Create a temporary directory for test outputs.
    """
    with tempfile.TemporaryDirectory(prefix="vulnbuster_test_") as tmpdir:
        yield Path(tmpdir)

@pytest.fixture
def sample_findings() -> List[ReportFinding]:
    ""
    Generate sample findings for testing.
    """
    return [
        ReportFinding(
            id=f"finding-{i}",
            title=f"Test Finding {i}",
            description=f"This is test finding {i}",
            severity=severity,
            confidence=confidence,
            location=f"https://example.com/vuln/{i}",
            details={"test": True, "index": i},
            evidence=[{"source": "test", "content": f"Evidence for finding {i}"}],
            remediation=f"Fix for finding {i}",
            references=[f"https://example.com/ref/{i}"],
            tags=["test", f"tag-{i % 3}"],
            cwe=79 + i,
            cve=f"CVE-2023-{1000 + i}",
            cvss_score=2.5 + i * 0.5,
            cvss_vector=f"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H-{i}",
            risk_score=5.0 + i,
            timestamp=datetime(2023, 1, 1, tzinfo=timezone.utc)
        )
        for i, (severity, confidence) in enumerate(zip(
            [
                ReportSeverity.CRITICAL,
                ReportSeverity.HIGH,
                ReportSeverity.MEDIUM,
                ReportSeverity.LOW,
                ReportSeverity.INFO
            ],
            [
                ReportConfidence.CERTAIN,
                ReportConfidence.FIRM,
                ReportConfidence.TENTATIVE,
                ReportConfidence.FIRM,
                ReportConfidence.TENTATIVE
            ]
        ))
    ]

@pytest.fixture
def sample_metadata() -> ReportMetadata:
    ""
    Generate sample report metadata for testing.
    """
    return ReportMetadata(
        title="Test Security Scan Report",
        description="This is a test report generated by the test suite.",
        version="1.0.0",
        generated_at=datetime(2023, 1, 1, tzinfo=timezone.utc),
        generator="VulnBuster Test Suite",
        generator_uri="https://github.com/yourorg/vulnbuster",
        generator_version="1.0.0",
        scan_duration=42.5,
        scan_target="https://example.com",
        scan_id="test-scan-123",
        custom_fields={
            "environment": "test",
            "scanner_version": "1.0.0",
            "test_run_id": "test-run-123"
        }
    )

@pytest.fixture
def report_options() -> Dict[str, Any]:
    ""
    Default report options for testing.
    """
    return {
        "min_severity": ReportSeverity.LOW,
        "include_evidence": True,
        "include_remediation": True,
        "include_references": True,
        "include_cvss": True,
        "include_risk_score": True
    }

@pytest.fixture
def html_template_path() -> Path:
    ""
    Path to the HTML template file.
    """
    template_path = TEST_DATA_DIR / "templates" / "report.html"
    template_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Create a simple template if it doesn't exist
    if not template_path.exists():
        template_path.write_text("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{{ metadata.title }}</title>
        </head>
        <body>
            <h1>{{ metadata.title }}</h1>
            <p>{{ metadata.description }}</p>
            
            <h2>Findings ({{ findings|length }})</h2>
            <ul>
            {% for finding in findings %}
                <li>
                    <strong>{{ finding.title }}</strong> ({{ finding.severity.upper() }})
                    <p>{{ finding.description }}</p>
                </li>
            {% endfor %}
            </ul>
        </body>
        </html>
        """)
    
    return template_path

@pytest.fixture
def markdown_template_path() -> Path:
    ""
    Path to the Markdown template file.
    """
    template_path = TEST_DATA_DIR / "templates" / "report.md"
    template_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Create a simple template if it doesn't exist
    if not template_path.exists():
        template_path.write_text("""
        # {{ metadata.title }}
        
        {{ metadata.description }}
        
        ## Findings ({{ findings|length }})
        
        {% for finding in findings %}
        ### {{ finding.title }}
        
        **Severity:** {{ finding.severity.upper() }}
        
        {{ finding.description }}
        
        ---
        {% endfor %}
        """)
    
    return template_path

@pytest.fixture
def custom_styles() -> Dict[str, Any]:
    ""
    Custom styles for testing.
    """
    return {
        "header_color": "#2c3e50",
        "critical_color": "#c0392b",
        "high_color": "#e67e22",
        "medium_color": "#f1c40f",
        "low_color": "#3498db",
        "info_color": "#95a5a6"
    }
